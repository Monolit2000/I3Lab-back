// <auto-generated />
using System;
using I3Lab.Clinics.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace I3Lab.Clinics.Infrastructure.Migrations
{
    [DbContext(typeof(ClinicContext))]
    partial class ClinicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("clinic")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("I3Lab.Clinics.Domain.Clinics.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.HasKey("Id");

                    b.ToTable("Clinics", "clinic");
                });

            modelBuilder.Entity("I3Lab.Clinics.Domain.Clinics.ClinicCreationProposal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.HasKey("Id");

                    b.ToTable("ClinicCreationProposals", "clinic");
                });

            modelBuilder.Entity("I3Lab.Clinics.Domain.Clinics.Clinic", b =>
                {
                    b.OwnsOne("I3Lab.Clinics.Domain.Clinics.ClinicAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("ClinicId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ClinicAddress");

                            b1.HasKey("ClinicId");

                            b1.ToTable("Clinics", "clinic");

                            b1.WithOwner()
                                .HasForeignKey("ClinicId");
                        });

                    b.OwnsOne("I3Lab.Clinics.Domain.Clinics.ClinicName", "ClinicName", b1 =>
                        {
                            b1.Property<Guid>("ClinicId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ClinicName");

                            b1.HasKey("ClinicId");

                            b1.ToTable("Clinics", "clinic");

                            b1.WithOwner()
                                .HasForeignKey("ClinicId");
                        });

                    b.OwnsMany("I3Lab.Clinics.Domain.Clinics.ClinicDoctor", "ClinicDoctors", b1 =>
                        {
                            b1.Property<Guid>("DoctorId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("AddedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("ClinicId")
                                .HasColumnType("uuid");

                            b1.HasKey("DoctorId");

                            b1.HasIndex("ClinicId");

                            b1.ToTable("ClinicDoctors", "clinic");

                            b1.WithOwner()
                                .HasForeignKey("ClinicId");
                        });

                    b.OwnsOne("I3Lab.Clinics.Domain.Clinics.ClinicStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("ClinicId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ClinicStatus");

                            b1.HasKey("ClinicId");

                            b1.ToTable("Clinics", "clinic");

                            b1.WithOwner()
                                .HasForeignKey("ClinicId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ClinicDoctors");

                    b.Navigation("ClinicName")
                        .IsRequired();

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("I3Lab.Clinics.Domain.Clinics.ClinicCreationProposal", b =>
                {
                    b.OwnsOne("I3Lab.Clinics.Domain.ClinicCreationProposals.ConfirmationStatus", "ConfirmationStatus", b1 =>
                        {
                            b1.Property<Guid>("ClinicCreationProposalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ConfirmationStatus");

                            b1.HasKey("ClinicCreationProposalId");

                            b1.ToTable("ClinicCreationProposals", "clinic");

                            b1.WithOwner()
                                .HasForeignKey("ClinicCreationProposalId");
                        });

                    b.OwnsOne("I3Lab.Clinics.Domain.Clinics.ClinicAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("ClinicCreationProposalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ClinicAddress");

                            b1.HasKey("ClinicCreationProposalId");

                            b1.ToTable("ClinicCreationProposals", "clinic");

                            b1.WithOwner()
                                .HasForeignKey("ClinicCreationProposalId");
                        });

                    b.OwnsOne("I3Lab.Clinics.Domain.Clinics.ClinicName", "ClinicName", b1 =>
                        {
                            b1.Property<Guid>("ClinicCreationProposalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ClinicName");

                            b1.HasKey("ClinicCreationProposalId");

                            b1.ToTable("ClinicCreationProposals", "clinic");

                            b1.WithOwner()
                                .HasForeignKey("ClinicCreationProposalId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ClinicName")
                        .IsRequired();

                    b.Navigation("ConfirmationStatus")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
