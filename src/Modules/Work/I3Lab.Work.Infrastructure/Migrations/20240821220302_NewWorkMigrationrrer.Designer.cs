// <auto-generated />
using System;
using System.Collections.Generic;
using I3Lab.Works.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace I3Lab.Works.Infrastructure.Migrations
{
    [DbContext(typeof(WorkContext))]
    [Migration("20240821220302_NewWorkMigrationrrer")]
    partial class NewWorkMigrationrrer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("work")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("I3Lab.Works.Domain.BlobFiles.BlobFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BlobDirectoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContainerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TreatmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("BlobFiles", "work");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Members.MemberToInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("MemberRole", "I3Lab.Works.Domain.Members.MemberToInvite.MemberRole#MemberRole", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("MemberRole");
                        });

                    b.HasKey("Id");

                    b.ToTable("Members", "work");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Treatments.Treatments", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TreatmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Creator")
                        .HasColumnType("uuid");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("Patient")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TreatmentPreview")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Treatments", "work");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Treatments.TreatmentStage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TreatmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentId");

                    b.ToTable("TreatmentStage", "work");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Works.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Creator")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Customer")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("TreatmentTitel")
                        .HasColumnType("text");

                    b.Property<DateTime>("WorkStartedDate")
                        .HasColumnType("timestamp with time zone");

                    b.ComplexProperty<Dictionary<string, object>>("WorkStatus", "I3Lab.Works.Domain.Works.Work.WorkStatus#WorkStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("WorkStatus");
                        });

                    b.HasKey("Id");

                    b.ToTable("Works", "work");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Works.WorkFile", b =>
                {
                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContainerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TreatmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkId1")
                        .HasColumnType("uuid");

                    b.HasKey("FileId");

                    b.HasIndex("TreatmentId");

                    b.HasIndex("WorkId1")
                        .IsUnique();

                    b.ToTable("WorkFile", "work");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.BlobFiles.BlobFile", b =>
                {
                    b.OwnsOne("I3Lab.Works.Domain.BlobFiles.Accessibilitylevel", "Accessibilitylevel", b1 =>
                        {
                            b1.Property<Guid>("BlobFile")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Accessibilitylevel");

                            b1.HasKey("BlobFile");

                            b1.ToTable("BlobFiles", "work");

                            b1.WithOwner()
                                .HasForeignKey("BlobFile");
                        });

                    b.OwnsOne("I3Lab.Works.Domain.BlobFiles.BlobFileType", "FileType", b1 =>
                        {
                            b1.Property<Guid>("BlobFile")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FileType");

                            b1.HasKey("BlobFile");

                            b1.ToTable("BlobFiles", "work");

                            b1.WithOwner()
                                .HasForeignKey("BlobFile");
                        });

                    b.Navigation("Accessibilitylevel");

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Treatments.TreatmentStage", b =>
                {
                    b.HasOne("I3Lab.Works.Domain.Treatments.Treatments", null)
                        .WithMany("TreatmentStages")
                        .HasForeignKey("TreatmentId");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Works.Work", b =>
                {
                    b.OwnsMany("I3Lab.Works.Domain.Works.WorkMember", "WorkMembers", b1 =>
                        {
                            b1.Property<Guid>("TreatmentId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MemberToInvite")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("AddedBy")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("JoinDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TreatmentId", "MemberToInvite");

                            b1.HasIndex("TreatmentId", "MemberToInvite")
                                .IsUnique();

                            b1.ToTable("WorkMember", "work");

                            b1.WithOwner()
                                .HasForeignKey("TreatmentId");

                            b1.OwnsOne("I3Lab.Works.Domain.Works.MemberAccessibilityType", "AccessibilityType", b2 =>
                                {
                                    b2.Property<Guid>("WorkMemberWorkId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("WorkMemberMemberId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .HasColumnType("text")
                                        .HasColumnName("AccessibilityType");

                                    b2.HasKey("WorkMemberWorkId", "WorkMemberMemberId");

                                    b2.ToTable("WorkMember", "work");

                                    b2.WithOwner()
                                        .HasForeignKey("WorkMemberWorkId", "WorkMemberMemberId");
                                });

                            b1.Navigation("AccessibilityType");
                        });

                    b.Navigation("WorkMembers");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Works.WorkFile", b =>
                {
                    b.HasOne("I3Lab.Works.Domain.Works.Work", null)
                        .WithMany("WorkFiles")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("I3Lab.Works.Domain.Works.Work", null)
                        .WithOne("WorkAvatarImage")
                        .HasForeignKey("I3Lab.Works.Domain.Works.WorkFile", "WorkId1");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Treatments.Treatments", b =>
                {
                    b.Navigation("TreatmentStages");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Works.Work", b =>
                {
                    b.Navigation("WorkAvatarImage");

                    b.Navigation("WorkFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
