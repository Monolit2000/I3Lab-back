// <auto-generated />
using System;
using System.Collections.Generic;
using I3Lab.Works.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace I3Lab.Works.Infrastructure.Migrations
{
    [DbContext(typeof(WorkContext))]
    [Migration("20240911192854_eneasdfjfsdjisdff")]
    partial class eneasdfjfsdjisdff
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("work")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("I3Lab.Works.Domain.BlobFiles.BlobFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BlobDirectoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WorkId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("BlobFiles", "work");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Members.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("WorkChatId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("MemberRole", "I3Lab.Works.Domain.Members.Member.MemberRole#MemberRole", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("MemberRole");
                        });

                    b.HasKey("Id");

                    b.HasIndex("WorkChatId");

                    b.ToTable("Members", "work");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Treatments.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TreatmentPreviewId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentPreviewId");

                    b.ToTable("Treatments", "work");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.WorkChats.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FileResponceIdId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageText")
                        .HasColumnType("text");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WorkChatId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileResponceIdId");

                    b.HasIndex("WorkChatId");

                    b.ToTable("ChatMessage", "work");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.WorkChats.WorkChat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkChats", "work");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Works.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TreatmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TreatmentId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("WorkStartedDate")
                        .HasColumnType("timestamp with time zone");

                    b.ComplexProperty<Dictionary<string, object>>("WorkStatus", "I3Lab.Works.Domain.Works.Work.WorkStatus#WorkStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("WorkStatus");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TreatmentId");

                    b.HasIndex("TreatmentId1");

                    b.ToTable("Works", "work");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Works.WorkFile", b =>
                {
                    b.Property<Guid>("WorkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkId1")
                        .HasColumnType("uuid");

                    b.HasKey("WorkId");

                    b.HasIndex("FileId");

                    b.HasIndex("WorkId1")
                        .IsUnique();

                    b.ToTable("WorkFile", "work");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.BlobFiles.BlobFile", b =>
                {
                    b.OwnsOne("I3Lab.Works.Domain.BlobFiles.Accessibilitylevel", "Accessibilitylevel", b1 =>
                        {
                            b1.Property<Guid>("BlobFileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Accessibilitylevel");

                            b1.HasKey("BlobFileId");

                            b1.ToTable("BlobFiles", "work");

                            b1.WithOwner()
                                .HasForeignKey("BlobFileId");
                        });

                    b.OwnsOne("I3Lab.Works.Domain.BlobFiles.BlobFilePath", "Path", b1 =>
                        {
                            b1.Property<Guid>("BlobFileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("BlobDirectoryName")
                                .HasColumnType("text");

                            b1.Property<string>("ContainerName")
                                .HasColumnType("text");

                            b1.Property<string>("FileName")
                                .HasColumnType("text");

                            b1.HasKey("BlobFileId");

                            b1.ToTable("BlobFiles", "work");

                            b1.WithOwner()
                                .HasForeignKey("BlobFileId");
                        });

                    b.OwnsOne("I3Lab.Works.Domain.BlobFiles.BlobFileType", "FileType", b1 =>
                        {
                            b1.Property<Guid>("BlobFileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FileType");

                            b1.HasKey("BlobFileId");

                            b1.ToTable("BlobFiles", "work");

                            b1.WithOwner()
                                .HasForeignKey("BlobFileId");
                        });

                    b.OwnsOne("I3Lab.Works.Domain.BlobFiles.BlobFileUrl", "Url", b1 =>
                        {
                            b1.Property<Guid>("BlobFileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Url");

                            b1.HasKey("BlobFileId");

                            b1.ToTable("BlobFiles", "work");

                            b1.WithOwner()
                                .HasForeignKey("BlobFileId");
                        });

                    b.Navigation("Accessibilitylevel");

                    b.Navigation("FileType");

                    b.Navigation("Path");

                    b.Navigation("Url");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Members.Member", b =>
                {
                    b.HasOne("I3Lab.Works.Domain.WorkChats.WorkChat", null)
                        .WithMany("ChatMembers")
                        .HasForeignKey("WorkChatId");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Treatments.Treatment", b =>
                {
                    b.HasOne("I3Lab.Works.Domain.Members.Member", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("I3Lab.Works.Domain.Members.Member", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("I3Lab.Works.Domain.BlobFiles.BlobFile", "TreatmentPreview")
                        .WithMany()
                        .HasForeignKey("TreatmentPreviewId");

                    b.OwnsOne("I3Lab.Works.Domain.Treatments.Titel", "Titel", b1 =>
                        {
                            b1.Property<Guid>("TreatmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Titel");

                            b1.HasKey("TreatmentId");

                            b1.ToTable("Treatments", "work");

                            b1.WithOwner()
                                .HasForeignKey("TreatmentId");
                        });

                    b.OwnsOne("I3Lab.Works.Domain.Treatments.TreatmentDate", "TreatmentDate", b1 =>
                        {
                            b1.Property<Guid>("TreatmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("TreatmentFinished")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("TreatmentStarted")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TreatmentId");

                            b1.ToTable("Treatments", "work");

                            b1.WithOwner()
                                .HasForeignKey("TreatmentId");
                        });

                    b.OwnsMany("I3Lab.Works.Domain.Treatments.TreatmentMember", "TreatmentMemberss", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("AddedById")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("JoinDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid?>("MemberId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("TreatmentId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id")
                                .HasName("sdfsdfsdf");

                            b1.HasIndex("AddedById")
                                .IsUnique();

                            b1.HasIndex("MemberId")
                                .IsUnique();

                            b1.HasIndex("TreatmentId");

                            b1.ToTable("TreatmentMember", "work");

                            b1.HasOne("I3Lab.Works.Domain.Members.Member", "AddedBy")
                                .WithOne()
                                .HasForeignKey("I3Lab.Works.Domain.Treatments.Treatment.TreatmentMemberss#I3Lab.Works.Domain.Treatments.TreatmentMember", "AddedById");

                            b1.HasOne("I3Lab.Works.Domain.Members.Member", "Member")
                                .WithOne()
                                .HasForeignKey("I3Lab.Works.Domain.Treatments.Treatment.TreatmentMemberss#I3Lab.Works.Domain.Treatments.TreatmentMember", "MemberId");

                            b1.WithOwner()
                                .HasForeignKey("TreatmentId");

                            b1.OwnsOne("I3Lab.Works.Domain.Works.MemberAccessibilityType", "AccessibilityType", b2 =>
                                {
                                    b2.Property<Guid>("TreatmentMemberId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .HasColumnType("text")
                                        .HasColumnName("AccessibilityType");

                                    b2.HasKey("TreatmentMemberId");

                                    b2.ToTable("TreatmentMember", "work");

                                    b2.WithOwner()
                                        .HasForeignKey("TreatmentMemberId");
                                });

                            b1.Navigation("AccessibilityType");

                            b1.Navigation("AddedBy");

                            b1.Navigation("Member");
                        });

                    b.Navigation("Creator");

                    b.Navigation("Patient");

                    b.Navigation("Titel");

                    b.Navigation("TreatmentDate");

                    b.Navigation("TreatmentMemberss");

                    b.Navigation("TreatmentPreview");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.WorkChats.ChatMessage", b =>
                {
                    b.HasOne("I3Lab.Works.Domain.BlobFiles.BlobFile", "FileResponceId")
                        .WithMany()
                        .HasForeignKey("FileResponceIdId");

                    b.HasOne("I3Lab.Works.Domain.WorkChats.WorkChat", null)
                        .WithMany("Messages")
                        .HasForeignKey("WorkChatId");

                    b.Navigation("FileResponceId");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Works.Work", b =>
                {
                    b.HasOne("I3Lab.Works.Domain.Members.Member", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("I3Lab.Works.Domain.Members.Member", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("I3Lab.Works.Domain.Treatments.Treatment", "Treatment")
                        .WithMany()
                        .HasForeignKey("TreatmentId");

                    b.HasOne("I3Lab.Works.Domain.Treatments.Treatment", null)
                        .WithMany("TreatmentStages")
                        .HasForeignKey("TreatmentId1");

                    b.OwnsOne("I3Lab.Works.Domain.Works.WorkTitel", "Titel", b1 =>
                        {
                            b1.Property<Guid>("WorkId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Titel");

                            b1.HasKey("WorkId");

                            b1.ToTable("Works", "work");

                            b1.WithOwner()
                                .HasForeignKey("WorkId");
                        });

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("Titel");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Works.WorkFile", b =>
                {
                    b.HasOne("I3Lab.Works.Domain.BlobFiles.BlobFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("I3Lab.Works.Domain.Works.Work", null)
                        .WithMany("WorkFiles")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("I3Lab.Works.Domain.Works.Work", null)
                        .WithOne("WorkAvatarImage")
                        .HasForeignKey("I3Lab.Works.Domain.Works.WorkFile", "WorkId1");

                    b.Navigation("File");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Treatments.Treatment", b =>
                {
                    b.Navigation("TreatmentStages");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.WorkChats.WorkChat", b =>
                {
                    b.Navigation("ChatMembers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("I3Lab.Works.Domain.Works.Work", b =>
                {
                    b.Navigation("WorkAvatarImage");

                    b.Navigation("WorkFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
