// <auto-generated />
using System;
using I3Lab.Modules.BlobFailes.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace I3Lab.Modules.BlobFailes.Infrastructure.Migrations
{
    [DbContext(typeof(BlobFileContext))]
    [Migration("20241006212147_sdfsdfsfdfsdff")]
    partial class sdfsdfsfdfsdff
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("blobFile")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("I3Lab.Modules.BlobFailes.Domain.BlobFiles.BlobFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BlobFiles", "blobFile");
                });

            modelBuilder.Entity("I3Lab.Modules.BlobFailes.Domain.BlobFiles.BlobFile", b =>
                {
                    b.OwnsOne("I3Lab.Modules.BlobFailes.Domain.BlobFiles.Accessibilitylevel", "Accessibilitylevel", b1 =>
                        {
                            b1.Property<Guid>("BlobFileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Accessibilitylevel");

                            b1.HasKey("BlobFileId");

                            b1.ToTable("BlobFiles", "blobFile");

                            b1.WithOwner()
                                .HasForeignKey("BlobFileId");
                        });

                    b.OwnsOne("I3Lab.Modules.BlobFailes.Domain.BlobFiles.BlobFilePath", "Path", b1 =>
                        {
                            b1.Property<Guid>("BlobFileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("BlobDirectoryName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ContainerName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("BlobFileId");

                            b1.ToTable("BlobFiles", "blobFile");

                            b1.WithOwner()
                                .HasForeignKey("BlobFileId");
                        });

                    b.OwnsOne("I3Lab.Modules.BlobFailes.Domain.BlobFiles.BlobFileUrl", "Url", b1 =>
                        {
                            b1.Property<Guid>("BlobFileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Url");

                            b1.HasKey("BlobFileId");

                            b1.ToTable("BlobFiles", "blobFile");

                            b1.WithOwner()
                                .HasForeignKey("BlobFileId");
                        });

                    b.OwnsOne("I3Lab.Modules.BlobFailes.Domain.BlobFiles.ContentType", "ContentType", b1 =>
                        {
                            b1.Property<Guid>("BlobFileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("ContentType");

                            b1.HasKey("BlobFileId");

                            b1.ToTable("BlobFiles", "blobFile");

                            b1.WithOwner()
                                .HasForeignKey("BlobFileId");
                        });

                    b.Navigation("Accessibilitylevel")
                        .IsRequired();

                    b.Navigation("ContentType")
                        .IsRequired();

                    b.Navigation("Path")
                        .IsRequired();

                    b.Navigation("Url")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
