// <auto-generated />
using System;
using I3Lab.Administration.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace I3Lab.Administration.Infrastructure.Migrations
{
    [DbContext(typeof(AdministrationContext))]
    [Migration("20240917141639_sdfdssdfdsf")]
    partial class sdfdssdfdsf
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("administration")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("I3Lab.Administration.Domain.DoctorCreationProposals.DoctorCreationProposal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("DoctorCreationProposals", "administration");
                });

            modelBuilder.Entity("I3Lab.Administration.Domain.DoctorCreationProposals.DoctorCreationProposal", b =>
                {
                    b.OwnsOne("I3Lab.Administration.Domain.DoctorCreationProposals.DoctorAvatar", "DoctorAvatar", b1 =>
                        {
                            b1.Property<Guid>("DoctorCreationProposalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("DoctorAvatarUrl");

                            b1.HasKey("DoctorCreationProposalId");

                            b1.ToTable("DoctorCreationProposals", "administration");

                            b1.WithOwner()
                                .HasForeignKey("DoctorCreationProposalId");
                        });

                    b.OwnsOne("I3Lab.Administration.Domain.DoctorCreationProposals.DoctorCreationProposalStatus", "ConfirmationStatus", b1 =>
                        {
                            b1.Property<Guid>("DoctorCreationProposalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ConfirmationStatus");

                            b1.HasKey("DoctorCreationProposalId");

                            b1.ToTable("DoctorCreationProposals", "administration");

                            b1.WithOwner()
                                .HasForeignKey("DoctorCreationProposalId");
                        });

                    b.OwnsOne("I3Lab.Administration.Domain.DoctorCreationProposals.DoctorName", "Name", b1 =>
                        {
                            b1.Property<Guid>("DoctorCreationProposalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("LastName");

                            b1.HasKey("DoctorCreationProposalId");

                            b1.ToTable("DoctorCreationProposals", "administration");

                            b1.WithOwner()
                                .HasForeignKey("DoctorCreationProposalId");
                        });

                    b.OwnsOne("I3Lab.Administration.Domain.DoctorCreationProposals.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("DoctorCreationProposalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.HasKey("DoctorCreationProposalId");

                            b1.ToTable("DoctorCreationProposals", "administration");

                            b1.WithOwner()
                                .HasForeignKey("DoctorCreationProposalId");
                        });

                    b.OwnsOne("I3Lab.Administration.Domain.DoctorCreationProposals.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("DoctorCreationProposalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("DoctorCreationProposalId");

                            b1.ToTable("DoctorCreationProposals", "administration");

                            b1.WithOwner()
                                .HasForeignKey("DoctorCreationProposalId");
                        });

                    b.Navigation("ConfirmationStatus")
                        .IsRequired();

                    b.Navigation("DoctorAvatar");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
